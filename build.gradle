apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'java-gradle-plugin'
apply plugin: 'ivy-publish'
apply plugin: 'maven-publish'

repositories {
	mavenCentral()
}

dependencies {
	compile gradleApi()
	compile localGroovy()
	compileOnly group: 'org.reflections', name: 'reflections', version: '0.9.11'
	testCompile group: 'junit', name: 'junit', version: '4.+'
	testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
	testCompile group: 'org.assertj', name: 'assertj-core', version: '3.+'
}


def applicationName = "CobolPlugin"
group = 'de.sebastianruziczka'
version = '0.0.17'

GradlePropertyFilter propFilter = new GradlePropertyFilter([
	'gradle.actualVersion' : version,
	'gradle.unitVersion' : '0.0.4'
	])

gradlePlugin{
	plugins {
		cobol {
			id = 'de.sebastianruziczka.Cobol'
			implementationClass = 'de.sebastianruziczka.Cobol'
		
		}
	}
}


jar {
	manifest {
		attributes(
			"Implementation-Title": project.name,
			"Implementation-Version": version,
			"Build-Date": new Date().format( 'dd.MM.yyyy' )
		)
	}
	from {
		configurations.compileOnly.collect { it.isDirectory() ? it : zipTree(it) }
	}
}


publishing {
    repositories {
        ivy {
            // change to point to your repo, e.g. http://my.org/repo
            url "../repo/ivy"
        }
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url "../repo/mvn"
        }
    }
}


task (deleteDocs, type: Delete){
	delete 'docs/index.md'
}


task (generateDocVersions, type: Copy, dependsOn:['deleteDocs']){
	from 'docs'
	into 'docs'
	include '**/*.base'
	rename {it - 'base' + 'md'}
	filter { line ->propFilter.filter(line)}
} 

task (deleteCI, type: Delete){
	delete 'ci/build.gradle.replacement'
}


task (generateCIVersions, type: Copy, dependsOn:['deleteCI']){
	from 'ci'
	into 'ci'
	include '**/*.base'
	rename {it - '.base'}
	filter { line ->propFilter.filter(line)}
}



task (generateVersions, dependsOn: [generateDocVersions, generateCIVersions]){
	
}
